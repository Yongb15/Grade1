tuple
- 값 수정 x
- 읽기만 가능해 읽기 전용 자료를 저장할 때 사용
- 리스트는 []로 생성하고, tuple는 소괄호 ()로 생성한다
- tuple은 ()를 생략 가능하다, 항목이 하나인 tuple은 뒤에 쉼표를 붙임
- tuple 내부는 ","로 원소를 구분
- tuple의 원소는 어떤 타입도 가능
- 원소가 하나일 경우
	ex) t = (1)일 경우에는 tuple x, t = (1, ) <- 이럴 경우여야 생성

- 동일한 자료형
- 혼용 자료형
- 빈 tuple -> ()
- 변수로 할당하여 생성 -> ex) month = ('Jan','Feb'...)
- list로부터 tuple 생성 

- tuple은 silce가 가능
- tuple은 합병이 가능
- tuple은 곱이 가능

- list 사용시 활용했던 함수들 tuple에서 사용 가능
- len() 함수 -> ex) len(t1)
- min() 함수 - 최소값 -> ex) min(t1)
- max() 함수 - 최대값 -> ex) max(t1)

list와 tuple
공통점 - 원소로 구성 -> ex) len() 함수
         - 시퀀스 형 -> ex) list의 연산과 비슷(slicing, indexing, min(), max())
차이점 
list					tuple
- 대괄호 []로 표기 ex) list = [1,2,3]			- 소괄호 ()로 표기 ex) tuple = (1,2,3)
- 원소 삽입, 삭제, 교체, 수정 가능			- 원소 삽입, 삭제, 교체, 수정 불가능

tuple의 오류
tt1.append(40)
tt1[0] = 40
del(tt1[0])

tuple의 삭제
del(tt1)
del(tt2)

tuple의 사용
- 덧셈, slice 가능, 곱셈

tuple의 수정
튜플 -> 리스트 -> 튜플 변환
list로 형변환을 해서 수정을 한 후 다시 tuple로 형변환을 해야 한다.

딕셔너리
개념 : 쌍 2개가 하나로 묶인 자료구조
- 중괄호 {}로 묶어 구성 key와 값의 쌍으로 구성

- 딕셔너리변수 = {키1:값1, 키2:값2, 키3:값3, ... }
	ex) D = {'spring':'봄', 'summer':'여름, 'fall':'가을', 'winter':'겨울'}

- 키의 값은 사용자가 지정

주의점
- 딕셔너리는 순서가 없어 생성한 순서대로 딕셔너리가 구성되어 있다는 보장이 없음

※ 문자열은 불변 객체

딕셔너리의 삽입
- d[key] = value | key와 value 쌍 추가
ex) student['연락처'] = '010-1111-2222'

dictionary에 존재하는 원소를 삭제하는 함수
- del d[key] | key와 결합된 구성원소 삭제

딕셔너리의 주의점
- 딕셔너리 키는 유일해야 하므로 동일한 키를 갖는 딕셔너리를 생성하는 것이 아니라 마지막에 있는 키가 적용
ex) student = {'학번' : 1000, '이름' : '홍길동', '학과' : '파이썬', '학번' : 2000}
	<출력결과> {'학번' : 2000, '이름' : '홍길동', '학과' : '파이썬'}

딕셔너리의 키 값에 접근하는 함수
- 딕셔너리명.get(키)
	ex) student.get('이름')
- 딕셔너리명[키]와 딕셔너리명.get(키)는 결과가 같음
- 딕셔너리명[키]는 없는 키 호출하면 오류가 나지만 딕셔너리명.get(키)는 없는 키를 호출하면 아무것도 반환하지 않음
- 없는 키를 찾을 때 딕셔너리명.get(키)를 사용

- key들로 이루어진 list를 리턴 - 딕셔너리명.keys()
- 딕셔너리명.keys()는 딕셔너리의 모든 키 반환

출력 결과의 dict_keys가 보기 싫으면 list(딕셔너리명.keys())함수 사용
ex) list(student1.key())

value들로 이루어진 list를 리턴하는 함수 - 딕셔너리명.items()
- 딕셔너리명.values() 함수는 딕셔너리의 모든 값(vlaue)을 리스트로 만들어 반환
- 딕셔너리명.values() 함수도 출력 결과의 dict_values가 보기 싫으면
   list(딕셔너리명.values()) 함수 사용

key값과 그에 해당하는 value들의 쌍을 tuple로 리턴하는 함수 - 딕셔너리명.items()
- 딕셔너리명.items() 함수를 사용하면 튜플 형태로도 구할 수 있음
- d.items() | (ket, value)로 이루어진 tuple 리턴
- 딕셔너리 안에 해당 키가 있는지 없는지는 in을 사용해 확인
- 딕셔너리에 키가 있다면 True를 반환하고, 없다면 False를 반환한다

모든 요소들을 제거하고 초기화
- d.clear() | 모든 요소들을 제거하고 초기화
- 빈 딕셔너리만 남음


