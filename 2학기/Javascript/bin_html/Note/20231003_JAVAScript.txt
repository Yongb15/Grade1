반복문

for문 : 개수가 정해져 있을 경우

while문 : 조건식 참

do-while문 : 한번은 반드시 실행

배열

여러 개의 자료를 한꺼번에 다룰 수 있는 자료형

배열의 요소 : 배열[인덱스]

for 반복문
예제 4-5

let array = [1, 2, 3, 4, 5, 6];
	
for (let i = array.length -1; i >= 0; i--) {
	console.log(array[i]);	
}

※ 객체에 쉽게 반복문을 적용

for in 반복문(for(let 인덱스 in 배열))			// i에 아무것도 안적으면 0부터 시작

let array = ["사과", "배", "포도", "딸기", "바나나"];	// 변수 선언

for (let i in array) {					// 0 ~ 4까지	
	console.log(`$(i)번째 요소 : $(array[i])`);
}
console.log("----- 구분선 -----");

for of 반복문(for(let 요소 of 배열))

let array = ["사과", "배", "포도", "딸기", "바나나"];	// 변수 선언

for (let i in array) {					// 0 ~ 4까지	
	console.log(`$(i)번째 요소 : $(array[i])`);
}
console.log("----- 구분선 -----");

for (let item of array) {
	console.log(item);
}


중첩 반복문

별 피라미드(1)

let output = '';

for (let i = 0; i < 10; i++) {
	for (let j = 0; j < i+1; j++) {
		output += '*';
	}
	output += '\n';
}

console.log(output);

별 피라미드(2)

let output = '';

for (let i = 0; i < 10; i++) {
	for (let j = 0; j < 10-i; j++) {
		output += ' ';
	}
	for (let k = 0; k < i + 1; k++) {
		output += '*';
	}
	output += '\n';
}
console.log(output);

console.log(output);

break 키워드 : 반복문을 벗어날떄 사용

break 키워드

let i = 0;
let array = [1, 31, 273, 57, 8, 11, 32]

while(true) {
	if (array[i] % 2 == 0) {
		output = array[i];
		break;
	}

	i = i + 1;
}
console.log(`처음 발견한 짝수는 ${output}입니다.`);

예제 break문

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>예제 break문</title>
</head>
<body>
    <h3>1에서 얼마까지 더해야 3000을 넘는가?</h3>
    <hr>
    <script>
        let i = 1, sum = 0;
        while(true) {
            sum += i;

            if(sum > 3000) {
                break;
            }

            i++;
        }
        document.write(i + "까지 더하면 3000을 넘음 : " + sum);
    </script>
</body>
</html>



2차시

7) continue 키워드(1)

for (let i = 0; i < 10; i++) {
	if (i % 2 == 0) {
		continue;
	}
	console.log(i);
}

8) continue 키워드(2)

2. for (let i = 0; i < 10; i++) {
	if (i % 2 != 0) {
		console.log(i);
	}
}



9) 예제 continue문

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>continue</title>
</head>
<body>
    <h3>3으로 나눈 나머지가 1인 수만 더하기</h3>
    <hr>
    <script>
        let sum = 0;
        
        for(let i = 1; i <= 10; i++) {
            if(i % 3 != 1) {
                continue;
            }
            document.write(i + " ");
            sum += i;
        }
        document.write("합은 " + sum);
    </script>
</body>
</html>



※ 스코프 Scope
변수를 사용할 수 있는 범위
스코프 == 블록
※ 블록
중괄호로 둘러싸는 부분


10) 괄호를 사용한 스코프

{
	let a = 10;
}
console.log(a);



11 반복문으로 만든 스코프

for(let j = 0; j < 3; j++) {
	console.log(j);
}
console.log(j);



12) 스코프 내부에서 이름 중복

let a = 1;
let b = 1;
{
	let a = 2;
	{
		let a = 3;
		console.log(a);
		console.log(b);
	}
	console.log(a);
	console.log(b);		
} console.log(a);



※ 호이스팅
해당 블록에서 사용할 변수를 미리 확인해서 정리하는 작업

13) 호이스팅 문제 : 오류 발생

let a = 1;
{
	console.log(a);			
	let a = 2;			// console.log(a)보다 위에 있어야 함.
}




3차시

함수의 사용목적

1) 간소화하기 좋음
2) 중복되지 않음
3) 유지보수가 쉬워짐

함수 구분법

sum = 변수
sum() {} = 함수

14) 익명 함수

이름을 붙이지 않고 함수 생성
함수를 호출하면 함수 내부의 코드가 모두 실행
ex) let 함수 이름 = function() { }

let 함수 = function() {
	console.log("함수의 첫 번째 줄");
	console.log("함수의 두 번째 줄");
}

함수();
console.log(함수);



15) 선언적 함수 ★

이름을 붙여 함수를 생성
ex) function 함수 이름() { }

function 함수() {
	console.log("함수의 첫 번째 줄");
	console.log("함수의 두 번째 줄");
};

함수();
console.log(함수);



16) 화살표 함수(선언적 함수 사용x, 익명 함수일때만 사용)

※ () => { } : 화살표 함수
'하나의 표현식을 리턴하는 함수'를 만들 때는 중괄호 생략 가능
익명 함수 예제를 화살표 함수로 바꾸기

let 함수 = () => {
	console.log("함수의 첫 번쨰 줄");
	console.log("함수의 두 번째 줄");
};

함수();
console.log(함수);



17) 함수의 기본 형태(1)

function power(x) {
	return x * x;
}

console.log(power(10));
console.log(power(20));



18) 함수의 기본 형태(2)

function multiply(x, y) {
	return x * y;
}

console.log(multiply(52, 273));
console.log(multiply(103, 32));



19) 함수의 기본 형태(3)

function print(message) {
	console.log(`"${message}"(이)라고 말했습니다!`);
}

print("안녕하세요");
print("자바스크립트 공부");



20) 매개 변수의 리턴(1)

기본 형태
function (매개 변수, 매개 변수) {
	let output = 초깃값;
	// output 계산
	return output;
}

function sum(min, max) {
	let output = 0;
	for(let i = min; i <= max; i++) {
		output += i;
	}
	return output;
}
console.log(sum(1, 100));



21) 매개 변수와 리턴(2)

function sum(min, max) {
	let output = 1;
	for(let i = min; i <= max; i++) {
		output *= i;
	}
	return output;
}
console.log(sum(1, 10));




























































